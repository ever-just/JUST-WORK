version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: justwork-postgres
    environment:
      POSTGRES_DB: justwork
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: justwork_password_2024
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    networks:
      - justwork-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: justwork-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - justwork-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # JUST-WORK Application
  app:
    build: .
    container_name: justwork-app
    ports:
      - "3000:3000"
      - "5173:5173"  # Vite dev server
    environment:
      NODE_ENV: development
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: justwork
      DB_USER: postgres
      DB_PASSWORD: justwork_password_2024
      REDIS_HOST: redis
      REDIS_PORT: 6379
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - justwork-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run dev

  # Nginx reverse proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: justwork-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    networks:
      - justwork-network
    depends_on:
      - app
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  justwork-network:
    driver: bridge
